{"ast":null,"code":"var _jsxFileName = \"/Users/raphtalia/workspace/rails/5xruby/client/src/index.js\";\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Header } from './inc/header';\nimport { Footer } from './inc/footer';\nimport { TodoForm } from './todoForm';\nimport { TodoList } from './todoList';\nimport { Login } from './login';\n\nclass TodoApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userSession: TodoApp.getUserSessionData(),\n      tasks: [],\n      currentTask: ''\n    };\n    this.addTask = this.addTask.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n    this.doneTask = this.doneTask.bind(this);\n    this.doLogin = this.doLogin.bind(this);\n  }\n\n  componentWillMount() {\n    this.refreshTasks();\n  }\n\n  componentDidUpdate() {// this.refreshTasks();\n  }\n\n  refreshTasks() {\n    const uri = 'http://127.0.0.1:3000/tasks';\n\n    function handleErrors(response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }\n\n    fetch(uri, {\n      method: 'get'\n    }).then(handleErrors).then(response => response.json().then(data => ({\n      data: data,\n      status: response.status\n    }))).then(res => {\n      if (res.data) {\n        this.setState({\n          tasks: res.data\n        });\n      }\n    }).catch(function (err) {\n      alert('Fetch エラー : サーバー死んだ');\n    });\n  }\n\n  static getUserSessionData() {\n    let loginData = localStorage.getItem('login');\n    loginData = JSON.parse(loginData);\n\n    if (loginData !== null && loginData.login === true) {\n      return {\n        userName: loginData.userName\n      };\n    } else {\n      return false;\n    }\n  }\n\n  static isLogged() {\n    let loginData = localStorage.getItem('login');\n    loginData = JSON.parse(loginData);\n\n    if (loginData !== null && loginData.login === true) {\n      return true;\n    }\n\n    return false;\n  }\n\n  doLogin(userName) {\n    let loginData = {\n      login: true,\n      userName: userName\n    };\n    this.setState({\n      userSession: {\n        userName: loginData.userName\n      }\n    });\n    loginData = JSON.stringify(loginData);\n    localStorage.setItem('login', loginData);\n  }\n\n  addTask(task) {\n    // let updatedList = this.state.tasks;\n    // updatedList.push({ text: task, status: 'passive' });\n    // this.setState({ tasks: updatedList });\n    // this.updateLocalStorage(updatedList);\n    if (task !== '') {\n      const uri = 'http://127.0.0.1:3000/tasks';\n      fetch(uri, {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          text: task,\n          status: 'onhand'\n        })\n      }).then(this.setState({\n        tasks: []\n      }), setTimeout(() => {\n        this.refreshTasks();\n      }, 1000));\n    } else {\n      alert('何もない');\n    } // .then(\n    //     response =>\n    //         response.json().then(data => ({\n    //             data: data,\n    //             status: response.status\n    //         }))\n    // )\n    // .then(res => {\n    //     if (res.data) {\n    //         this.setState({\n    //             tasks: res.data\n    //         });\n    //     }\n    // })\n\n  }\n\n  removeTask(task_id) {\n    // let updatedList = this.state.tasks;\n    // updatedList.splice(task_id.replace('task_', ''), 1);\n    // this.setState({ tasks: updatedList });\n    // this.updateLocalStorage(updatedList);\n    const uri = `http://127.0.0.1:3000/tasks/${task_id}`;\n    fetch(uri, {\n      method: 'delete',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(this.setState({\n      tasks: []\n    }), setTimeout(() => {\n      this.refreshTasks();\n    }, 100));\n  }\n\n  doneTask(task_id) {\n    // let updatedList = this.state.tasks;\n    // let currentStatus = updatedList[task_id.replace('task_', '')].status;\n    // let newStatus = 'active';\n    // if (currentStatus === 'active') {\n    //     newStatus = 'passive';\n    // }\n    // updatedList[task_id.replace('task_', '')].status = newStatus;\n    // this.setState({ tasks: updatedList });\n    // this.updateLocalStorage(updatedList);\n    const uri = `http://127.0.0.1:3000/tasks/${task_id}`;\n    console.log(uri);\n\n    function handleErrors(response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }\n\n    fetch(uri, {\n      method: 'get'\n    }).then(handleErrors).then(response => response.json().then(data => ({\n      data: data,\n      status: response.status\n    }))).then(res => {\n      if (res.data) {\n        delete res.data.id;\n        this.setState({\n          currentTask: res.data\n        });\n      }\n    }).then(setTimeout(() => {\n      console.log(this.state.currentTask);\n      var data = this.state.currentTask;\n      data.status == 'passive' ? data.status = 'active' : data.status = 'passive';\n      fetch(uri, {\n        method: 'put',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n    }, 100)).then(this.setState({\n      tasks: []\n    }), setTimeout(() => {\n      this.refreshTasks();\n    }, 200)).catch(function (err) {\n      console.log(err);\n      alert('Fetch エラー : サーバー死んだ');\n    });\n  } // updateLocalStorage(updatedList) {\n  //     var updatedList = JSON.stringify(updatedList);\n  //     localStorage.setItem('tasks', updatedList);\n  //     return true;\n  // }\n\n\n  render() {\n    let layout = React.createElement(Login, {\n      doLogin: this.doLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    });\n\n    if (TodoApp.isLogged() === true) {\n      layout = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(Header, {\n        loginData: TodoApp.getUserSessionData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(TodoForm, {\n        addTask: this.addTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), React.createElement(TodoList, {\n        myList: this.state.tasks,\n        addTask: this.addTask,\n        removeTask: this.removeTask,\n        doneTask: this.doneTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, layout));\n  }\n\n}\n\nrender(React.createElement(TodoApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 274\n  },\n  __self: this\n}), document.getElementById('appRoot'));","map":{"version":3,"sources":["/Users/raphtalia/workspace/rails/5xruby/client/src/index.js"],"names":["React","render","Header","Footer","TodoForm","TodoList","Login","TodoApp","Component","constructor","state","userSession","getUserSessionData","tasks","currentTask","addTask","bind","removeTask","doneTask","doLogin","componentWillMount","refreshTasks","componentDidUpdate","uri","handleErrors","response","ok","Error","statusText","fetch","method","then","json","data","status","res","setState","catch","err","alert","loginData","localStorage","getItem","JSON","parse","login","userName","isLogged","stringify","setItem","task","headers","Accept","body","text","setTimeout","task_id","console","log","id","layout","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\n\nimport { Header } from './inc/header';\nimport { Footer } from './inc/footer';\nimport { TodoForm } from './todoForm';\nimport { TodoList } from './todoList';\nimport { Login } from './login';\n\nclass TodoApp extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            userSession: TodoApp.getUserSessionData(),\n            tasks: [],\n            currentTask: ''\n        };\n        this.addTask = this.addTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n        this.doneTask = this.doneTask.bind(this);\n        this.doLogin = this.doLogin.bind(this);\n    }\n\n    componentWillMount() {\n        this.refreshTasks();\n    }\n\n    componentDidUpdate() {\n        // this.refreshTasks();\n    }\n\n    refreshTasks() {\n        const uri = 'http://127.0.0.1:3000/tasks'\n        function handleErrors(response) {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response;\n        }\n        fetch(uri, {\n            method: 'get'\n        })\n            .then(handleErrors)\n            .then(\n                response =>\n                    response.json().then(data => ({\n                        data: data,\n                        status: response.status\n                    }))\n            )\n            .then(res => {\n                if (res.data) {\n                    this.setState({\n                        tasks: res.data\n                    });\n                }\n            })\n            .catch(function (err) {\n                alert('Fetch エラー : サーバー死んだ');\n            });\n    }\n\n    static getUserSessionData() {\n        let loginData = localStorage.getItem('login');\n        loginData = JSON.parse(loginData);\n        if (loginData !== null && loginData.login === true) {\n            return { userName: loginData.userName };\n        } else {\n            return false;\n        }\n    }\n\n    static isLogged() {\n        let loginData = localStorage.getItem('login');\n        loginData = JSON.parse(loginData);\n        if (loginData !== null && loginData.login === true) {\n            return true;\n        }\n        return false;\n    }\n\n    doLogin(userName) {\n        let loginData = {\n            login: true,\n            userName: userName\n        };\n        this.setState({\n            userSession: {\n                userName: loginData.userName,\n            }\n        });\n        loginData = JSON.stringify(loginData);\n        localStorage.setItem('login', loginData);\n    }\n\n    addTask(task) {\n        // let updatedList = this.state.tasks;\n        // updatedList.push({ text: task, status: 'passive' });\n        // this.setState({ tasks: updatedList });\n        // this.updateLocalStorage(updatedList);\n\n        if (task !== '') {\n            const uri = 'http://127.0.0.1:3000/tasks'\n            fetch(uri, {\n                method: 'post',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                },\n                body: JSON.stringify(\n                    { text: task, status: 'onhand' }\n                )\n            })\n                .then(\n                    this.setState({\n                        tasks: []\n                    }),\n                    setTimeout(() => {\n                        this.refreshTasks()\n                    }, 1000)\n                )\n        } else {\n            alert('何もない')\n        }\n\n        // .then(\n        //     response =>\n        //         response.json().then(data => ({\n        //             data: data,\n        //             status: response.status\n        //         }))\n        // )\n        // .then(res => {\n        //     if (res.data) {\n        //         this.setState({\n        //             tasks: res.data\n        //         });\n        //     }\n        // })\n    }\n\n    removeTask(task_id) {\n        // let updatedList = this.state.tasks;\n        // updatedList.splice(task_id.replace('task_', ''), 1);\n        // this.setState({ tasks: updatedList });\n        // this.updateLocalStorage(updatedList);\n\n        const uri = `http://127.0.0.1:3000/tasks/${task_id}`\n        fetch(uri, {\n            method: 'delete',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            }\n        })\n            .then(\n                this.setState({\n                    tasks: []\n                }),\n                setTimeout(() => {\n                    this.refreshTasks()\n                }, 100)\n            )\n    }\n\n    doneTask(task_id) {\n        // let updatedList = this.state.tasks;\n        // let currentStatus = updatedList[task_id.replace('task_', '')].status;\n        // let newStatus = 'active';\n        // if (currentStatus === 'active') {\n        //     newStatus = 'passive';\n        // }\n        // updatedList[task_id.replace('task_', '')].status = newStatus;\n        // this.setState({ tasks: updatedList });\n        // this.updateLocalStorage(updatedList);\n\n        const uri = `http://127.0.0.1:3000/tasks/${task_id}`\n        console.log(uri)\n        function handleErrors(response) {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response;\n        }\n\n\n        fetch(uri, {\n            method: 'get'\n        })\n            .then(handleErrors)\n            .then(\n                response =>\n                    response.json().then(data => ({\n                        data: data,\n                        status: response.status\n                    }))\n            )\n            .then(res => {\n                if (res.data) {\n                    delete res.data.id\n                    this.setState({\n                        currentTask: res.data\n                    });\n                }\n            })\n            .then(\n                setTimeout(() => {\n                    console.log(this.state.currentTask)\n                    var data = this.state.currentTask\n\n                    data.status == 'passive' ?\n                        data.status = 'active' : data.status = 'passive'\n                    fetch(uri, {\n                        method: 'put',\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Accept: \"application/json\",\n                        },\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Accept: \"application/json\",\n                        },\n                        body: JSON.stringify(\n                            data\n                        )\n                    })\n                }, 100)\n            )\n            .then(\n                this.setState({\n                    tasks: []\n                }),\n                setTimeout(() => {\n                    this.refreshTasks()\n                }, 200)\n            )\n            .catch(function (err) {\n                console.log(err)\n                alert('Fetch エラー : サーバー死んだ');\n            });\n    }\n\n    // updateLocalStorage(updatedList) {\n    //     var updatedList = JSON.stringify(updatedList);\n    //     localStorage.setItem('tasks', updatedList);\n    //     return true;\n    // }\n\n    render() {\n        let layout = (<Login doLogin={this.doLogin} />);\n        if (TodoApp.isLogged() === true) {\n            layout = (\n                <div>\n                    <Header loginData={TodoApp.getUserSessionData} />\n                    <TodoForm addTask={this.addTask} />\n                    <TodoList myList={this.state.tasks} addTask={this.addTask} removeTask={this.removeTask}\n                        doneTask={this.doneTask} />\n                    <Footer />\n                </div>\n            );\n        }\n        return (\n            <div>\n                <div className=\"content\">\n                    {layout}\n                </div>\n            </div>\n        )\n    }\n}\n\nrender(<TodoApp />, document.getElementById('appRoot'));\n"]},"metadata":{},"sourceType":"module"}